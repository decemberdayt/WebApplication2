<!DOCTYPE html>
<html>
<head>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDRy0zMHt_FlvgrBiQfzob2HCiLSJfIxmY&callback=callback"
            async defer></script>
    <style type="text/css">
        /* black infowindow font */
        .AnyUnusedClassName {
            color: #000000;
        }

        #map {
            height: 550px;
            width: 100%;
        }

        #placeSearchBox {
            background-color: #fff;
            font-family: Roboto;
            font-size: 12px;
            font-weight: 300;
            margin-left: 7px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            display: inline-block;
            width: 400px;
            height: 23px;
        }

        /*buttonUI*/
        #deleteLastUI,
        #deleteAllUI,
        #saveDataUI,
        #placePhotoUI,
        #deletePhotoUI,
        #distanceDispUI{
            background-color: #fff;
            border: 2px solid #fff;
            border-radius: 3px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            float: left;
            margin-bottom: 15px;
            text-align: center;
        }

        /*buttonAddLeftMarginUI*/
        #deleteLastUI {
            margin-left: 12px;
        }

        /*buttonText*/
        #deleteLastText,
        #deleteAllText,
        #saveDataText,
        #placePhotoText,
        #deletePhotoText,
        #distanceDispText {
            color: #191919;
            font-family: Roboto, Arial, sans-serif;
            font-size: 12px;
            line-height: 16px;
            padding-left: 5px;
            padding-right: 5px;
        }
    </style>
    <script>
        const Warszawa = { lat: 52.229676, lng: 21.012229 }
        const defaultZoom = 11;
        var distance = 0;
        var directionsService;
        var directionsRenderer;
        var markers = [];
        var imageMarkers = [];
        var map;
        var imageUrls = [];

        //google api callback/main
        function callback() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: Warszawa,
                zoom: defaultZoom,
                mapTypeId: "roadmap",
                disableDefaultUI: true,
                //no ctrl+scroll zoom but only scroll
                gestureHandling: 'greedy'
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                draggable: true,
                map,
                suppressMarkers: true
            });

            CreateCustomControls();

            directionsRenderer.addListener("directions_changed", () => {
                ComputeTotalDistance(directionsRenderer.getDirections());               
            });

        }

        function CreateCustomControls() {
            SearchBox();
            CustomButton("Delete all place markers", "deleteAllUI", "deleteAllText", DeleteAllPlaceMarkers, google.maps.ControlPosition.BOTTOM_CENTER);
            CustomButton("Delete last place marker", "deleteLastUI", "deleteLastText", DeleteLastPlaceMarker, google.maps.ControlPosition.BOTTOM_CENTER);
            CustomButton("Place URL photo", "placePhotoUI", "placePhotoText", AddPhotoMarker, google.maps.ControlPosition.LEFT_TOP);
            CustomButton("Delete last photo", "deletePhotoUI", "deletePhotoText", DeleteLastPhotoMarker, google.maps.ControlPosition.LEFT_TOP);
            CustomButton("Route length: " + String(distance) + " km", "distanceDispUI", "distanceDispText", ComputeTotalDistance, google.maps.ControlPosition.RIGHT_BOTTOM);
            CustomButton("Save it", "saveDataUI", "saveDataText", SavaData, google.maps.ControlPosition.RIGHT_TOP);
        }

        function CustomButton(innerText, UI, font, buttonFunction, position) {
            const myDiv = document.createElement("div");

            // Set CSS for the control border
            const buttonUI = document.createElement("div");
            buttonUI.id = UI;
            myDiv.appendChild(buttonUI);

            // Set CSS for the control interior
            const buttonText = document.createElement("div");
            buttonText.id = font;
            buttonText.innerHTML = innerText;
            buttonUI.appendChild(buttonText);

            //Delete all markers
            buttonUI.addEventListener("click", () => {
                buttonFunction();
            });

            map.controls[position].push(
                myDiv
            );

        }

        function SavaData() {
            var OriginCoordinates = String(markers[0].getPosition());
            var DestinationCoordinates = String(markers[1].getPosition());
            var Origin = String(markers[0].getTitle());
            var Destination = String(markers[1].getTitle());
            var routeId = $.ajax({
                type: "GET",
                url: "https://localhost:44336/Routes/FindMaxRouteId",
                async: false,
            }).responseText;
            var newRouteId = parseInt(routeId) + 1;
            // POST trasa
            $.ajax({
                type: "POST",
                url: "https://localhost:44336/Routes/CreateJS",
                data: { RouteId: newRouteId, Origin: Origin, OriginCoordinates: OriginCoordinates, Destination: Destination, DestinationCoordinates: DestinationCoordinates, RouteLength: distance },
                async: false,
            });
            var i;

            for (i = 0; i < imageMarkers.length; i++) {
                $.ajax({
                    type: "POST",
                    url: "https://localhost:44336/Photos/SavePhoto",
                    data: { Coordinates: String(imageMarkers[i].position), PhotoUrl: imageUrls[i], RouteId: newRouteId },
                    async: false,
                })
            }
        }

        function DeleteLastPhotoMarker() {
            imageMarkers[imageMarkers.length - 1].setMap(null);
            imageMarkers.pop();
            imageUrls.pop();
        }

        function AddPhotoMarker() {
            console.log("imageUrls: ", imageUrls[0]);
            infowindowimage = new google.maps.InfoWindow({
                content: "no image provided"
            });
            var getImage = prompt("Paste image url:");
            if (getImage != null) {
                var imageMarker = new google.maps.Marker({
                    map,
                    position: map.getCenter(),
                    icon: "http://maps.google.com/mapfiles/kml/pal4/icon38.png",
                    draggable: true,
                });
                imageMarkers.push(imageMarker);
                imageUrls.push(getImage);

                infowindowimage.setContent("<div style='float:left'><img src=" + getImage + "></div>");

            }

            google.maps.event.addListener(imageMarker, "click", () => {
                infowindowimage.close();
                infowindowimage.open(map, imageMarker);
            });
        }

        function DeleteAllPlaceMarkers() {
            for (var j = markers.length - 1; j >= 0; j--) {
                //remove marker from map and markers array
                markers[j].setMap(null);
                markers.pop();
                //redraw shortened routes
                DrawRoutes(); 
            }
        }

        function DeleteLastPlaceMarker() {
            //remove marker from map and markers array
            markers[markers.length - 1].setMap(null);
            markers.pop();
            //redraw shortened routes
            DrawRoutes(); 
        }

        function SearchBox() {
            // Create the search box and link it to the UI element.
            const input = document.getElementById("placeSearchBox");
            const searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener("bounds_changed", () => {
                searchBox.setBounds(map.getBounds());
            });

            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener("places_changed", () => {
                const places = searchBox.getPlaces();
                //reset searchbox
                document.getElementById("placeSearchBox").value = "";

                if (places.length == 0) {
                    return;
                }

                // For each place, get the icon, name and location.
                const bounds = new google.maps.LatLngBounds();

                places.forEach((place) => {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }

                    // Create a marker for each place.
                    var marker = new google.maps.Marker({
                        map,
                        title: place.name,
                        position: place.geometry.location,
                        label: "" + (markers.length + 1),
                        //draggable: true,
                    });
                    markers.push(marker);

                    if (markers.length > 1) {
                        DrawRoutes();
                    }

                    // markers address
                    if (!window.infowindow) {
                        window.infowindow = new google.maps.InfoWindow();
                    }

                    google.maps.event.addListener(marker, "click", () => {
                        infowindow.close();
                        //setting info window
                        infowindow.setContent(String(marker.getTitle())),
                            infowindow.open(map, marker);
                    });

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                //center map to marker
                map.fitBounds(bounds);

            });

        }

        function DrawRoutes() {
            var waypts = [];

            for (var j = 1; j < markers.length - 1; j++) {
                waypts.push({
                    location: markers[j].getPosition(),
                    stopover: false,
                });
            }

            directionsService.route(
                {
                    origin: markers[0].getPosition(),
                    destination: markers[markers.length - 1].getPosition(),
                    waypoints: waypts,
                    travelMode: google.maps.TravelMode.WALKING,
                },
                (result, status) => {
                    if (status === "OK") {
                        directionsRenderer.setDirections(result);
                    } else {
                        alert("Could not display directions due to: " + status);
                    }
                }
            );
        }

        function ComputeTotalDistance(result) {
            let total = 0;
            const myroute = result.routes[0];

            for (let i = 0; i < myroute.legs.length; i++) {
                total += myroute.legs[i].distance.value;
            }
            total = total / 1000;

            distance = total;
            //update route length
            document.getElementById("distanceDispText").innerHTML = ("Route length: " + String(distance) + " km");
        }

    </script>
</head>
<body>
    <h2>New route</h2>
    <p>
        Hello! Welcome! <br /> <br />
        Click on 'Add marker by address' to choose and mark a location! <br />
        Add two locations to draw a route. <br />
        Click on 'Paste photo-marker using url' to add markers with your photos. Drag and drop them wherever you want.
        <br /> <br />
        Enjoy!
    </p>
    <hr />
    <br>
    <input id="placeSearchBox"
           class="controls"
           type="text"
           placeholder="Add marker by address" />
    <div id="map" class="AnyUnusedClassName"></div>

</body>
</html>